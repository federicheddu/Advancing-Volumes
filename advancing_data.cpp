#include "advancing_data.h"
#undef NDEBUG

//get the initial model
DrawableTetmesh<> hardcode_model() {

    std::vector<vec3d> vertices{ vec3d(-0.085823504181121835, -0.24681741188082726, -0.42630242064995405),
                                 vec3d(0.22318972109010241, -0.15132541188082724, -0.42630242064995405),
                                 vec3d(0.38000297538163874, -0.25967991188082723, -0.224582920649954),
                                 vec3d(0.44679595751311757, 0.0031800881191727452, -0.26384342064995403),
                                 vec3d(-0.00041546387232890126, 0.0031800881191727452, -0.50097542064995404),
                                 vec3d(-0.085823504181121835, 0.25317758811917274, -0.42630242064995405),
                                 vec3d(-0.27680765025843784, 0.0031800881191727452, -0.42630142064995402),
                                 vec3d(-0.36221726775810664, 0.25317858811917276, -0.26384342064995403),
                                 vec3d(0.13778273224189336, 0.40768608811917273, -0.26384442064995406),
                                 vec3d(0.22318972109010241, 0.15768558811917274, -0.42630242064995405),
                                 vec3d(0.49958453612767106, -0.15132641188082724, -0.00097542064995402187),
                                 vec3d(0.49958453612767106, 0.15768658811917274, -0.00097542064995402187),
                                 vec3d(0.13778273224189336, -0.40132591188082722, -0.26384442064995406),
                                 vec3d(-0.36221726775810664, -0.24681841188082726, -0.26384342064995403),
                                 vec3d(-0.14571943061252771, -0.42213991188082722, -0.224582920649954),
                                 vec3d(-0.30943236925559681, 0.40768858811917275, -0.00097542064995402187),
                                 vec3d(-0.38083390312629661, 0.26604008811917274, 0.22263207935004597),
                                 vec3d(-0.50041546387232883, 0.15768658811917274, -0.00097542064995402187),
                                 vec3d(-0.47064178024840692, 0.0031800881191727452, -0.224582920649954),
                                 vec3d(0.38000297538163874, 0.26604008811917274, -0.224582920649954),
                                 vec3d(-0.00041546387232890126, 0.5031800881191727, -0.00097542064995402187),
                                 vec3d(-0.14571943061252771, 0.42850008811917273, -0.224582920649954),
                                 vec3d(0.36138634001344883, -0.24681841188082726, 0.26189257935004595),
                                 vec3d(0.14488850286786989, -0.42213991188082722, 0.22263207935004597),
                                 vec3d(0.30860144151093899, -0.40132841188082724, -0.00097542064995402187),
                                 vec3d(-0.30943236925559681, -0.40132841188082724, -0.00097542064995402187),
                                 vec3d(-0.00041546387232890126, -0.49681991188082725, -0.00097542064995402187),
                                 vec3d(-0.50041546387232883, -0.15132641188082724, -0.00097542064995402187),
                                 vec3d(0.30860144151093899, 0.40768858811917275, -0.00097542064995402187),
                                 vec3d(0.4698108525037491, 0.0031800881191727452, 0.22263207935004597),
                                 vec3d(-0.22402064883476022, -0.15132541188082724, 0.42435157935004597),
                                 vec3d(-0.38083390312629661, -0.25967991188082723, 0.22263207935004597),
                                 vec3d(-0.13861365998655117, -0.40132591188082722, 0.26189357935004598),
                                 vec3d(0.084992576436464032, -0.24681741188082726, 0.42435157935004597),
                                 vec3d(-0.00041546387232890126, 0.0031800881191727452, 0.49902457935004596),
                                 vec3d(-0.44762688525777539, 0.0031800881191727452, 0.26189257935004595),
                                 vec3d(0.14488850286786989, 0.42850008811917273, 0.22263207935004597),
                                 vec3d(-0.13861365998655117, 0.40768608811917273, 0.26189357935004598),
                                 vec3d(-0.22402064883476022, 0.15768558811917274, 0.42435157935004597),
                                 vec3d(0.36138634001344883, 0.25317858811917276, 0.26189257935004595),
                                 vec3d(0.27597672251378003, 0.0031800881191727452, 0.42435057935004594),
                                 vec3d(0.084992576436464032, 0.25317758811917274, 0.42435157935004597),
                                 vec3d(-0.00040996740817878451, 0.0031830469152481044, -0.00095845537724246642),
                                 vec3d(0.074261853326667765, 0.054779991141535436, 0.24903410986665461),
                                 vec3d(0.006484713767047184, -0.2468155306290134, -0.088512057756192503),
                                 vec3d(-0.0073158829391671773, 0.25318446887674007, 0.086564284678283282),
                                 vec3d(0.21637957629436311, 0.16239746837385294, -0.039207042489547615),
                                 vec3d(0.19222659035713444, -0.071020235716702976, -0.17630134870002423),
                                 vec3d(-0.08187507221472487, -0.053106368330978322, -0.2469760679605815),
                                 vec3d(-0.14260129502964264, -0.18319266538119927, 0.12014396321351214),
                                 vec3d(-0.21961068540056172, -0.16696327365786262, -0.096777647827218399),
                                 vec3d(0.13700789824113399, -0.17955812234986995, 0.1296821318477043),
                                 vec3d(-0.19549957591974793, 0.074195299504318635, 0.17435674705253965),
                                 vec3d(-0.20434442886149909, 0.16291158993261168, -0.070702567932917862),
                                 vec3d(0.018345108590328521, 0.19149805161649516, -0.20343334718736225),
                                 vec3d(0.26082640231118304, 0.010602660297822468, 0.11984168072481861),
                                 vec3d(-0.26740909874566371, 0.0078470615348318826, -0.17928712545323425),
                                 vec3d(-0.1881538964595201, -0.032223683703412269, 0.024634224017571888),
                                 vec3d(-0.05336788631971736, -0.036070930094585528, 0.1618593076178641),
                                 vec3d(-0.066506484591841816, -0.10486601795329333, -0.098088051792350389),
                                 vec3d(0.047824814432411898, 0.028603560630860912, -0.16287021505116248),
                                 vec3d(0.11243155215990598, 0.10334821108797503, 0.088289337312218205),
                                 vec3d(0.28687366485613658, -0.1432389552356548, -0.0097207045644912109),
                                 vec3d(0.028097100042814821, 0.15908072359755598, -0.04317071615630106),
                                 vec3d(0.11258644871986162, -0.12266860892559432, -0.034498403819071509),
                                 vec3d(-0.10275706697283511, 0.11967595880294012, 0.049061390186570401),
                                 vec3d(0.053955100401924923, -0.12514740133987678, 0.28800424284802956)};

    std::vector<uint> polys{54, 18, 57, 58
            ,12, 40, 29, 47
            ,54, 43, 61, 64
            ,26, 28, 32, 51
            ,54, 43, 64, 66
            ,35, 31, 53, 59
            ,11, 30, 56, 63
            ,5, 6, 49, 55
            ,44, 46, 62, 66
            ,42, 41, 35, 44
            ,27, 25, 45, 52
            ,15, 26, 45, 51
            ,42, 38, 37, 46
            ,51, 57, 58, 60
            ,41, 35, 44, 67
            ,33, 24, 50, 52
            ,44, 52, 56, 67
            ,45, 48, 60, 65
            ,14, 1, 49, 51
            ,16, 17, 54, 66
            ,40, 41, 44, 56
            ,12, 40, 47, 56
            ,20, 10, 47, 55
            ,1, 2, 5, 49
            ,29, 37, 46, 47
            ,43, 59, 62, 66
            ,3, 4, 48, 63
            ,40, 37, 29, 47
            ,9, 21, 55, 64
            ,47, 56, 62, 65
            ,6, 7, 5, 49
            ,22, 6, 9, 55
            ,36, 18, 53, 58
            ,20, 10, 4, 48
            ,38, 17, 16, 46
            ,54, 49, 55, 61
            ,1, 13, 2, 48
            ,63, 45, 52, 65
            ,46, 16, 54, 66
            ,45, 49, 51, 60
            ,6, 22, 8, 55
            ,20, 4, 47, 48
            ,63, 52, 45, 25
            ,12, 11, 56, 63
            ,47, 55, 61, 64
            ,53, 50, 58, 59
            ,43, 60, 61, 65
            ,39, 38, 44, 53
            ,10, 6, 5, 55
            ,30, 23, 56, 63
            ,45, 3, 48, 65
            ,2, 13, 3, 48
            ,37, 46, 47, 62
            ,52, 44, 59, 67
            ,18, 28, 57, 58
            ,7, 14, 49, 57
            ,56, 52, 62, 65
            ,31, 50, 59, 67
            ,50, 43, 58, 59
            ,50, 51, 58, 60
            ,50, 52, 59, 67
            ,44, 35, 59, 67
            ,24, 34, 52, 67
            ,53, 44, 59, 66
            ,1, 15, 45, 49
            ,47, 43, 62, 64
            ,43, 62, 64, 66
            ,39, 42, 35, 44
            ,14, 51, 49, 57
            ,48, 5, 49, 61
            ,37, 21, 29, 46
            ,21, 22, 55, 64
            ,17, 39, 36, 53
            ,9, 20, 29, 47
            ,45, 26, 50, 51
            ,32, 28, 50, 51
            ,1, 48, 2, 49
            ,15, 45, 49, 51
            ,16, 22, 46, 54
            ,1, 15, 13, 45
            ,26, 32, 50, 51
            ,38, 17, 46, 53
            ,32, 36, 31, 50
            ,28, 50, 51, 58
            ,22, 54, 55, 64
            ,26, 33, 27, 50
            ,41, 42, 40, 44
            ,8, 22, 54, 55
            ,27, 45, 50, 52
            ,40, 37, 47, 62
            ,60, 48, 61, 65
            ,39, 38, 42, 44
            ,45, 51, 50, 60
            ,1, 45, 13, 48
            ,16, 22, 21, 46
            ,2, 10, 5, 48
            ,1, 45, 48, 49
            ,42, 37, 40, 44
            ,13, 15, 27, 45
            ,15, 26, 27, 45
            ,50, 58, 43, 60
            ,18, 8, 54, 57
            ,48, 49, 60, 61
            ,26, 32, 33, 50
            ,13, 27, 25, 45
            ,15, 1, 14, 51
            ,14, 19, 51, 57
            ,38, 39, 17, 53
            ,18, 8, 16, 54
            ,10, 5, 48, 61
            ,14, 19, 28, 51
            ,9, 10, 20, 55
            ,20, 47, 10, 48
            ,9, 6, 10, 55
            ,38, 16, 21, 46
            ,31, 33, 50, 67
            ,39, 44, 35, 53
            ,6, 7, 49, 57
            ,56, 48, 63, 65
            ,49, 57, 51, 60
            ,12, 20, 4, 47
            ,2, 48, 5, 49
            ,20, 12, 29, 47
            ,3, 45, 63, 65
            ,24, 27, 50, 52
            ,1, 15, 49, 51
            ,36, 39, 31, 53
            ,19, 28, 51, 57
            ,18, 17, 53, 54
            ,32, 36, 50, 58
            ,40, 47, 56, 62
            ,7, 1, 5, 49
            ,18, 54, 53, 58
            ,33, 24, 27, 50
            ,32, 31, 33, 50
            ,15, 14, 26, 51
            ,9, 20, 47, 55
            ,4, 2, 3, 48
            ,18, 17, 36, 53
            ,36, 31, 50, 53
            ,42, 37, 44, 46
            ,37, 38, 21, 46
            ,36, 53, 50, 58
            ,24, 23, 25, 52
            ,44, 38, 46, 53
            ,38, 42, 44, 46
            ,23, 52, 56, 63
            ,46, 47, 62, 64
            ,35, 53, 44, 59
            ,41, 44, 56, 67
            ,52, 43, 62, 65
            ,10, 55, 5, 61
            ,30, 12, 11, 56
            ,26, 14, 28, 51
            ,9, 55, 47, 64
            ,10, 48, 47, 61
            ,40, 56, 44, 62
            ,14, 1, 7, 49
            ,31, 50, 53, 59
            ,4, 10, 2, 48
            ,43, 47, 61, 64
            ,26, 27, 45, 50
            ,3, 13, 45, 48
            ,34, 23, 52, 67
            ,22, 21, 46, 64
            ,45, 48, 49, 60
            ,27, 24, 25, 52
            ,24, 34, 23, 52
            ,22, 46, 54, 64
            ,35, 31, 59, 67
            ,52, 56, 63, 65
            ,33, 52, 50, 67
            ,31, 39, 35, 53
            ,3, 63, 48, 65
            ,8, 22, 16, 54
            ,17, 18, 16, 54
            ,28, 51, 57, 58
            ,10, 47, 55, 61
            ,46, 54, 64, 66
            ,54, 61, 55, 64
            ,22, 9, 21, 55
            ,23, 41, 30, 56
            ,30, 41, 40, 56
            ,30, 40, 12, 56
            ,54, 55, 49, 57
            ,6, 49, 55, 57
            ,8, 55, 54, 57
            ,6, 55, 8, 57
            ,19, 18, 28, 57
            ,7, 8, 19, 57
            ,14, 7, 19, 57
            ,19, 8, 18, 57
            ,6, 8, 7, 57
            ,32, 50, 28, 58
            ,18, 36, 28, 58
            ,28, 36, 32, 58
            ,53, 59, 58, 66
            ,23, 25, 52, 63
            ,44, 53, 46, 66
            ,49, 54, 57, 60
            ,54, 43, 58, 60
            ,54, 58, 57, 60
            ,53, 58, 54, 66
            ,54, 58, 43, 66
            ,43, 58, 59, 66
            ,5, 55, 49, 61
            ,54, 43, 60, 61
            ,49, 54, 60, 61
            ,37, 44, 46, 62
            ,37, 40, 44, 62
            ,17, 53, 54, 66
            ,17, 16, 46, 66
            ,17, 46, 53, 66
            ,52, 43, 59, 62
            ,46, 64, 62, 66
            ,52, 59, 44, 62
            ,44, 56, 52, 62
            ,12, 56, 47, 63
            ,48, 47, 56, 63
            ,3, 45, 13, 63
            ,13, 45, 25, 63
            ,12, 47, 4, 63
            ,4, 47, 48, 63
            ,23, 11, 25, 63
            ,11, 3, 25, 63
            ,11, 4, 3, 63
            ,23, 30, 11, 63
            ,12, 4, 11, 63
            ,3, 13, 25, 63
            ,9, 47, 29, 64
            ,21, 29, 46, 64
            ,29, 47, 46, 64
            ,21, 9, 29, 64
            ,48, 56, 47, 65
            ,47, 62, 43, 65
            ,50, 45, 60, 65
            ,45, 50, 52, 65
            ,43, 50, 60, 65
            ,43, 61, 47, 65
            ,47, 61, 48, 65
            ,50, 59, 52, 65
            ,52, 59, 43, 65
            ,50, 43, 59, 65
            ,44, 62, 59, 66
            ,33, 24, 52, 67
            ,23, 41, 56, 67
            ,23, 56, 52, 67
            ,34, 31, 35, 67
            ,41, 34, 35, 67
            ,23, 34, 41, 67
            ,33, 31, 34, 67
            ,33, 34, 24, 67
    };

    for(uint &poly : polys)
        poly -= 1;

    return DrawableTetmesh<>(vertices, polys);
}

//get the initial model in right position and scale
void init_model(Data &d) {

    //get the model
    d.m = hardcode_model();
    //std::string sphere_path = get_file_path(__FILE__, false) + "sphere.mesh";
    //d.m = DrawableTetmesh<>(sphere_path.c_str());
    //d.m.scale(1/(d.m.bbox().delta_x()/2));
    //d.m.translate(-d.m.centroid());
    //d.m.mesh_data().filename = d.name;

    //get info for placing the sphere
    double dist;
    uint max_vid;
    double max_dist = -inf_double;
    //for every vid in the vol
    for (uint vid = 0; vid < d.tv.num_verts(); vid++) {
        dist = d.oct->closest_point(d.tv.vert(vid)).dist(d.tv.vert(vid));
        if (dist > max_dist) {
            max_vid = vid;
            max_dist = dist;
        }
    }

    //scale the model to the desired size & place in the right position
    d.m.scale((max_dist * d.sphere_rad) / (d.m.bbox().delta_x() / 2.0)); // (dist * 0.9)/(radius of the sphere)
    d.m.translate(d.tv.vert(max_vid)); //center on the max distance point

    //update ui
    d.m.updateGL();
    d.m.update_bbox();
}

//distance from the target
double dist_calc(Data &d, uint vid, bool raycast) {

    uint id; //warning killer
    double dist;

    //raycast hit (direction)
    if(raycast) d.oct->intersects_ray(d.m.vert(vid), d.m.vert_data(vid).normal, dist, id);
    //closest point
    else dist = d.oct->closest_point(d.m.vert(vid)).dist(d.m.vert(vid));

    return dist;
}

//check if the future position will flip the tet
bool does_movement_flip(Data &d, uint vid, uint pid, vec3d &target, int mesh) {

    DrawableTetmesh<> &m = mesh == MODEL ? d.m : d.mm;
    assert(m.poly_contains_vert(pid,vid));

    uint f_opp = m.poly_face_opposite_to(pid,vid);
    uint v0 = m.face_vert_id(f_opp,0);
    uint v1 = m.face_vert_id(f_opp,1);
    uint v2 = m.face_vert_id(f_opp,2);
    if(m.poly_face_is_CCW(pid,f_opp)) std::swap(v0,v1);

    // it the positive half space of the edge opposite to front_vert
    // does not contain the new_pos, the triangle is blocking
    return orient3d(m.vert(v0), m.vert(v1), m.vert(v2),target) * d.orient_sign <=0;
}

//check if the current position flipped some poly adj
bool is_vert_flipped(Data &d, uint vid) {

    vec3d v = d.m.vert(vid);

    for(uint pid : d.m.adj_v2p(vid))
        if(does_movement_flip(d,vid,pid,v)) return true;

    return false;
}

//check all orient (full mesh)
bool is_orient_ok(Data &d) {

    int count = 0;
    size_t num = d.m.num_polys();
    std::vector<vec3d > verts;

    //for all polys
    for(uint pid = 0; pid < num; pid++) {
        verts = d.m.poly_verts(pid);
        //check orient
        if(orient3d(verts[0], verts[1], verts[2], verts[3]) * d.orient_sign < 0) {
            count++;
            if(d.render) d.m.poly_data(pid).color = Color::RED();
        }
    }

    if(d.render) {
        if (count > 0) cout << TRED << "Flip count " << count << "/" << num << rendl << endl;
        else
            cout << TBLU << "No Flips" << rendl << endl;

        if (count > 0) d.m.updateGL();
    }

    return count > 0;
}

void map_check(Data &d) {

    bool same = true;
    std::vector<uint> adj, adj_m;

    for(uint vert = 0; vert < d.m.num_verts(); vert++) {
        adj = d.m.adj_v2v(vert);
        adj_m = d.mm.adj_v2v(vert);
        same = adj.size() == adj_m.size();
        if (!same) {
            cout << BRED << "Different sizes of vert adj" << rendl;
            break;
        }
        for (uint vid: adj) {
            same = CONTAINS_VEC(adj_m, vid);
            if (!same) break;
        }
        if(!same) break;
    }
    if (same) cout << BGRN << "Same verts adj" << rendl;
    else cout << BRED << "Not same verts adj" << rendl;

    for(uint vert = 0; vert < d.m.num_verts(); vert++) {
        adj = d.m.adj_v2p(vert);
        adj_m = d.mm.adj_v2p(vert);
        same = adj.size() == adj_m.size();
        if(!same) {
            cout << BRED << "Different sizes of pid adj" << rendl;
            break;
        }

        for(uint pid : adj) {
            std::vector<uint> opp = d.m.face_verts_id(d.m.poly_face_opposite_to(pid, vert), true);
            for(uint pid_m : adj_m) {
                std::vector<uint> opp_m = d.mm.face_verts_id(d.mm.poly_face_opposite_to(pid_m, vert), true);
                int count = 0;
                for(int i = 0; i < 3; i++) {
                    if(opp[i] == opp_m[i]) count++;
                }
                same = count == 3;
                if(same) break;
            }
            if(!same) break;
        }
        if(!same) break;
    }
    if(same) cout << BGRN << "Same tet adj" << rendl;
    else cout << BRED << "Not same tet adj" << rendl;

    if(same) cout << BGRN << "GOOD MAP" << rendl;
    else cout << BRED << "BAD MAP" << rendl;
}